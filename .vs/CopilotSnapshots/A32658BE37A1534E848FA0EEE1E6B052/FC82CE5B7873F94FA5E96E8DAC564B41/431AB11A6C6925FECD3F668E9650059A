using Microsoft.EntityFrameworkCore;
using Vanfist.Constants;
using Vanfist.DTOs.Requests;
using Vanfist.DTOs.Responses;
using Vanfist.Entities;
using Vanfist.Repositories;
using Vanfist.Services.Base;

namespace Vanfist.Services.Impl
{
    public class InvoiceService : Service, IInvoiceService
    {
        private readonly IInvoiceRepository _invoiceRepository;
        public InvoiceService(IInvoiceRepository invoiceRepository)
        {
            _invoiceRepository = invoiceRepository;
        }


        public async Task<InvoiceResponse> CreateInvoice(CreateInvoiceRequest request)
        {
            var entity = new Entities.Invoice
            {
                AccountId = request.AccountId,
                ModelId = request.ModelId,
                RequestDate = request.RequestDate,
                Description = request.Description,
                TotalPrice = request.TotalPrice,
                Status = request.Status,
                Type = request.Type,
            };
            await _invoiceRepository.Save(entity);
            await _invoiceRepository.SaveChanges();
            return InvoiceResponse.From(entity);
        }
        public async Task<IEnumerable<InvoiceResponse>> GetAllInvoice()
        {
            var invoices = await _invoiceRepository.FindAll();
            return invoices.Select(InvoiceResponse.From).ToList();
        }

        public async Task<IEnumerable<InvoiceResponse>> GetAllInvoiceByAccountId(int accountId)
        {
            var invoices = await _invoiceRepository.FindByAccountId(accountId);
            return invoices.Select(InvoiceResponse.From).ToList();
        }
        public async Task<InvoiceResponse?> GetInvoice(int invoiceId)
        {
            var invoice = await _invoiceRepository.FindById(invoiceId);
            if (invoice == null)
            {
                return null;
            }
            return InvoiceResponse.From(invoice);
        }

        public async Task<bool> UpdateInvoice(UpdateInvoiceRequest request)
        {
            var invoice = await _invoiceRepository.FindById(request.InvoiceId);
            if (invoice == null)
            {
                return false;
            }
            invoice.Status = request.Status;
            invoice.Type = request.Type;
            await _invoiceRepository.Update(invoice);
            await _invoiceRepository.SaveChanges();
            return true;
        }
        public async Task<bool> DeleteInvoice(int invoiceId)
        {
            var invoice = await _invoiceRepository.FindById(invoiceId);
            if (invoice == null)
            {
               return false;
            }
            await _invoiceRepository.Delete(invoice);
            await _invoiceRepository.SaveChanges();
            return true;
        }

        public async Task<PagedResult<InvoiceResponse>> GetPagedInvoice(InvoiceFilterRequest request, string role)
        {
            var query = _invoiceRepository.Query();

            // If the user is not Admin, filter by AccountId (only show own invoices)
            if (role != Constants.Role.Admin)
            {
                if (request.AccountId.HasValue)
                    query = query.Where(i => i.AccountId == request.AccountId.Value);
            }

            if (!string.IsNullOrEmpty(request.Status))
                query = query.Where(i => i.Status == request.Status);

            if (!string.IsNullOrEmpty(request.Type))
                query = query.Where(i => i.Type == request.Type);

            var totalCount = await query.CountAsync();

            var invoices = await query
                .OrderByDescending(i => i.CreatedAt)
                .Skip((request.Page - 1) * request.PageSize)
                .Take(request.PageSize)
                .ToListAsync();

            var responses = invoices.Select(InvoiceResponse.From).ToList();

            return new PagedResult<InvoiceResponse>
            {
                Page = request.Page,
                PageSize = request.PageSize,
                TotalCount = totalCount,
                Items = responses
            };
        }

    }
}
